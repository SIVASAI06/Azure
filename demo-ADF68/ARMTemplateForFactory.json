{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "demo-ADF68"
		},
		"ADBProducts_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ADBProducts'"
		},
		"AdvWorksFullDB_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AdvWorksFullDB'"
		},
		"MergedDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'MergedDatabase'"
		},
		"StorAproducts_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'StorAproducts'"
		},
		"WWImportersDB_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'WWImportersDB'"
		},
		"ADBProducts_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "demosqlsrver.database.windows.net"
		},
		"ADBProducts_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdvWorksDB"
		},
		"ADBProducts_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		},
		"AdvWorksFullDB_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "demosqlsrver.database.windows.net"
		},
		"AdvWorksFullDB_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdvWorks2022"
		},
		"AdvWorksFullDB_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		},
		"MergedDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "demosqlsrver.database.windows.net"
		},
		"MergedDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "MergeDB"
		},
		"MergedDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		},
		"WWImportersDB_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "demosqlsrver.database.windows.net"
		},
		"WWImportersDB_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "WideWorldImporters"
		},
		"WWImportersDB_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADBtoBLOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "tabletojsoncopy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ProductsLTTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ProductsLTJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateProductsSP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tabletojsoncopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Updateproducts1]"
						},
						"linkedServiceName": {
							"referenceName": "ADBProducts",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProductsLTTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductsLTJson')]",
				"[concat(variables('factoryId'), '/linkedServices/ADBProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MarkupPipeLine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MarkupDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Productstablestream": {},
									"BlobJson": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MarkupDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDBPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MergeDBDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MergeDBDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AdvWorksFullDBSource": {},
									"WWImportersDBSource": {},
									"WWImportersColorSource": {},
									"MergeDBProducts": {},
									"MergeDBClothesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MergeDBDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDBClothes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWImportersDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Clothes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWImportersDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDBProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MergedDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MergedDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsFullTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdvWorksFullDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdvWorksFullDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsLTJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorAproducts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "products"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/StorAproducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsLTTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADBProducts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADBProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockItemsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWImportersDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "StockItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWImportersDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADBProducts')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ADBProducts_properties_typeProperties_server')]",
					"database": "[parameters('ADBProducts_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('ADBProducts_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ADBProducts_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdvWorksFullDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AdvWorksFullDB_properties_typeProperties_server')]",
					"database": "[parameters('AdvWorksFullDB_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('AdvWorksFullDB_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AdvWorksFullDB_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergedDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('MergedDatabase_properties_typeProperties_server')]",
					"database": "[parameters('MergedDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('MergedDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('MergedDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorAproducts')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('StorAproducts_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWImportersDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('WWImportersDB_properties_typeProperties_server')]",
					"database": "[parameters('WWImportersDB_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('WWImportersDB_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('WWImportersDB_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MarkupDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductsLTTable",
								"type": "DatasetReference"
							},
							"name": "Productstablestream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductsLTJson",
								"type": "DatasetReference"
							},
							"name": "BlobJson",
							"rejectedDataLinkedService": {
								"referenceName": "StorAproducts",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "Markupcolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Productstablestream",
						"Productstablestream derive(Markup = ListPrice/StandardCost,",
						"     partitionBy('hash', 1)) ~> Markupcolumn",
						"Markupcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ProductswithMarkup'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate,",
						"          ModifiedDate,",
						"          Markup",
						"     ),",
						"     partitionBy('hash', 1)) ~> BlobJson"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProductsLTTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductsLTJson')]",
				"[concat(variables('factoryId'), '/linkedServices/StorAproducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDBDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductsFullTable",
								"type": "DatasetReference"
							},
							"name": "AdvWorksFullDBSource"
						},
						{
							"dataset": {
								"referenceName": "StockItemsTable",
								"type": "DatasetReference"
							},
							"name": "WWImportersDBSource"
						},
						{
							"dataset": {
								"referenceName": "StockItemsTable",
								"type": "DatasetReference"
							},
							"name": "WWImportersColorSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MergeDBProducts",
								"type": "DatasetReference"
							},
							"name": "MergeDBProducts"
						},
						{
							"dataset": {
								"referenceName": "MergeDBClothes",
								"type": "DatasetReference"
							},
							"name": "MergeDBClothesSink"
						}
					],
					"transformations": [
						{
							"name": "StockItemSort"
						},
						{
							"name": "FilterDiscontinued"
						},
						{
							"name": "DerivedCostAndItemType"
						},
						{
							"name": "DerivedProductType"
						},
						{
							"name": "SelectAdvWorksColumns"
						},
						{
							"name": "SelectWWImportersColumns"
						},
						{
							"name": "ColorNameLookup"
						},
						{
							"name": "AdvWorksSplitClothesfromProducts"
						},
						{
							"name": "WWImportesSplitClothesFromProducts"
						},
						{
							"name": "CheckRepeatedClothes"
						},
						{
							"name": "UnionAllClothes"
						},
						{
							"name": "UnionAllProducts"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          MakeFlag as boolean,",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeUnitMeasureCode as string,",
						"          WeightUnitMeasureCode as string,",
						"          Weight as decimal(8,2),",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          Class as string,",
						"          Style as string,",
						"          ProductSubcategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AdvWorksFullDBSource",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> WWImportersDBSource",
						"source(output(",
						"          ColorID as integer,",
						"          ColorName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select ColorID, ColorName from Warehouse.Colors',",
						"     format: 'query') ~> WWImportersColorSource",
						"WWImportersDBSource sort(asc(StockItemName, true),",
						"     caseInsensitive: true) ~> StockItemSort",
						"AdvWorksFullDBSource filter(isNull(SellEndDate)) ~> FilterDiscontinued",
						"StockItemSort derive(Cost = UnitPrice*(1+(TaxRate/100)),",
						"          ItemType = case(in(['S', 'M','L','3XS', '3XL', '4XL', '5XL',' 6XL','7XL','XS','XXS', 'XL', 'XXL'],Size),'Clothing','Product')) ~> DerivedCostAndItemType",
						"SelectAdvWorksColumns derive(ItemType = case(in(['S','M','L','XL'],Size), 'Clothing', 'Product')) ~> DerivedProductType",
						"FilterDiscontinued select(mapColumn(",
						"          Name,",
						"          Color,",
						"          Cost = StandardCost,",
						"          RetailPrice = ListPrice,",
						"          Size",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAdvWorksColumns",
						"ColorNameLookup select(mapColumn(",
						"          Name = StockItemName,",
						"          Cost,",
						"          RetailPrice = RecommendedRetailPrice,",
						"          Size,",
						"          ItemType,",
						"          Color = ColorName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWWImportersColumns",
						"DerivedCostAndItemType, WWImportersColorSource lookup(WWImportersDBSource@ColorID == WWImportersColorSource@ColorID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ColorNameLookup",
						"DerivedProductType split(ItemType == \"Product\",",
						"     disjoint: false) ~> AdvWorksSplitClothesfromProducts@(AdvWorksProducts, AdvClothes)",
						"SelectWWImportersColumns split(ItemType == \"Product\",",
						"     disjoint: false) ~> WWImportesSplitClothesFromProducts@(WWImportesProducts, WWImportesClothes)",
						"AdvWorksSplitClothesfromProducts@AdvClothes, WWImportesSplitClothesFromProducts@WWImportesClothes exists(AdvWorksSplitClothesfromProducts@AdvClothes@Name == WWImportesSplitClothesFromProducts@WWImportesClothes@Name,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckRepeatedClothes",
						"CheckRepeatedClothes, WWImportesSplitClothesFromProducts@WWImportesClothes union(byName: true)~> UnionAllClothes",
						"WWImportesSplitClothesFromProducts@WWImportesProducts, AdvWorksSplitClothesfromProducts@AdvWorksProducts union(byName: true)~> UnionAllProducts",
						"AdvWorksSplitClothesfromProducts@AdvWorksProducts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBProducts",
						"UnionAllProducts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBClothesSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProductsFullTable')]",
				"[concat(variables('factoryId'), '/datasets/StockItemsTable')]",
				"[concat(variables('factoryId'), '/datasets/MergeDBProducts')]",
				"[concat(variables('factoryId'), '/datasets/MergeDBClothes')]"
			]
		}
	]
}